[
    {
        "id": "a541e962.05bc68",
        "type": "tab",
        "label": "OPC - MQTT gateway",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2d69c5c6.987c9a",
        "type": "group",
        "z": "a541e962.05bc68",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#2e333a",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ffa8b348.163d1",
            "67b0d416.86be9c",
            "d1592692.b0c288",
            "4f44e4df.15649c",
            "7abd878a.32b868",
            "31fbca08.d36ba6",
            "81031395.09f46",
            "7bdadb96.c8d9c4",
            "11d4d3d7.08f86c",
            "e8510b04.d61b78",
            "60185f33.dbddd",
            "1363c1c6.17ac6e",
            "abea2513.f80ee8",
            "5d926f0e.5e4f5",
            "7764270f.b3c7b8",
            "5aea903.272407",
            "5b927549.2df72c",
            "a76f9db7.bac63",
            "ede27a74.c0d7b8",
            "277a247e.1825fc",
            "915f3a84.b48bf8",
            "cc5e34f5.2a8438",
            "4fd0bb3c.ded324",
            "bdf728ca.57e818",
            "66d0832a.88033c",
            "c94d0a25.0c4b88",
            "355e6226.555ffe",
            "ffa8b348.163d1"
        ],
        "x": 54,
        "y": 19,
        "w": 852,
        "h": 622
    },
    {
        "id": "6deb3d77.4824d4",
        "type": "group",
        "z": "a541e962.05bc68",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#2e333a",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c5d3e1c7.89057",
            "232d6213.98084e",
            "e61f4201.dd46",
            "f9386e78.1b212",
            "eabce6a4.7fff48",
            "31f314e2.19fc6c",
            "e309c92d.4e2ae8",
            "df220873.2b1458",
            "d89a0214.fc5e2",
            "274ccc6b.91c014",
            "70dad118.ddb49",
            "f40782d2.8ac6b",
            "972d103b.9cba5",
            "f12f868f.9b2f08"
        ],
        "x": 54,
        "y": 679,
        "w": 1052,
        "h": 222
    },
    {
        "id": "74d03250.dea62c",
        "type": "group",
        "z": "a541e962.05bc68",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#2e333a",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8d5735c2.df98d8",
            "7da6ff5b.49f4a",
            "d78e0bba.c21f18",
            "7de283ba.941c0c",
            "d8902ee6.21576"
        ],
        "x": 54,
        "y": 1159,
        "w": 852,
        "h": 182
    },
    {
        "id": "a2606c5b.b4e03",
        "type": "group",
        "z": "a541e962.05bc68",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d640eee8.ef8dc",
            "74b9c52f.d9b6ec",
            "e368b483.403388",
            "5a43c59b.cbbbfc",
            "ac08822a.9b56e",
            "5fefd353.e9effc",
            "abc75f3.abfe5a",
            "1c4c3293.2330fd",
            "3c2a2e56.789a62",
            "a147ab02.a20848",
            "387e894a.ee0676",
            "840dac3a.e5781",
            "e47614b0.266998",
            "275a848f.1abd7c",
            "8becaa91.f4c9b8",
            "6e552386.58629c",
            "38746bbc.62ac64",
            "a678ade1.0d24d",
            "30409f5d.67ebb",
            "410e19af.2bb1e8",
            "61559a20.d4f324",
            "14a74a6a.e50c56",
            "e03a532b.b138e",
            "e0a88428.8b25a8",
            "ed7245db.d3b308",
            "aaf2334e.a6f6a",
            "4d66ea16.8017e4",
            "d50a1c65.6863a",
            "dc8e6c89.e91f8",
            "ff01dfed.0c56",
            "8fa88358.be9b",
            "7fb44e1e.baa16",
            "8d3e555b.6321d8",
            "e9844d49.d7f81",
            "153b70e3.ed79af",
            "5dbd3542.a7302c",
            "5dbd3542.a7302c"
        ],
        "x": 54,
        "y": 1359,
        "w": 1032,
        "h": 542
    },
    {
        "id": "d539e52b.a141b8",
        "type": "group",
        "z": "a541e962.05bc68",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#2e333a",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "db061246.d1975",
            "27ead054.82555",
            "c9d7926a.ac847",
            "efa30c03.4ccf1",
            "a79c0571.ceb138",
            "535f121c.a34dbc",
            "c0ae3869.19fca8",
            "31580946.217de6",
            "f48742a3.f6f3a",
            "703fc0b8.e135d",
            "46ea9238.907b4c",
            "92ef667b.5281a8"
        ],
        "x": 54,
        "y": 919,
        "w": 852,
        "h": 222
    },
    {
        "id": "db061246.d1975",
        "type": "OpcUa-Client",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "endpoint": "d2ec86aa.d40148",
        "action": "readmultiple",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1000",
        "timeUnit": "ms",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "name": "opc-client",
        "x": 260,
        "y": 1040,
        "wires": [
            [
                "27ead054.82555",
                "a79c0571.ceb138"
            ]
        ]
    },
    {
        "id": "27ead054.82555",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Debug output read array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c9d7926a.ac847",
        "type": "inject",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Read multiple items",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "collect",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "readmultiple",
        "payload": "ALL",
        "payloadType": "str",
        "x": 320,
        "y": 1000,
        "wires": [
            [
                "efa30c03.4ccf1"
            ]
        ]
    },
    {
        "id": "efa30c03.4ccf1",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Read Loop",
        "func": "if (flow.get('readstart')==true){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('ready', false);",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "f48742a3.f6f3a"
            ]
        ]
    },
    {
        "id": "c5d3e1c7.89057",
        "type": "OpcUa-Browser",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "endpoint": "d2ec86aa.d40148",
        "item": "",
        "datatype": "",
        "topic": "",
        "items": [],
        "name": "opc-browser",
        "x": 230,
        "y": 780,
        "wires": [
            [
                "e61f4201.dd46",
                "232d6213.98084e"
            ]
        ]
    },
    {
        "id": "232d6213.98084e",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Debug namespace browser",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 820,
        "wires": []
    },
    {
        "id": "e61f4201.dd46",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Decode & filter nodeids",
        "func": "/*\nFor every namespace variables received from the payload, queue the variables with\na nodeClass of 2 (why? - something to do with having conforming with machine\ndatapoints) for the OPC client's node array to be read all at once. For queued \ndata to be read properly, the msg has to be properly formatted.\n*/\n\n\nvar items = msg.payload;\nvar nodeClass1array = [];\nvar nodeClass2array = [];\nvar parsecomplete = true; //remains true if child objects are all nodeClass 2 objects\n\n//on flow reload\nif (flow.get('system_reset') == 'true'){\n    return null;\n}\n\nfor (var i=0; i<items.length; i++) {\n    var item = items[i];\n\tvar ref = item.item;\n// \tif (ref.dataType==\"Null\"){break;}\n\tvar nodeClass = ref.$nodeClass;\n\ttopicstring = \"ns=\"+ref.nodeId.namespace+\";\"+\"s=\"+ref.nodeId.value;\n\tconsole.log(topicstring);\n\tif (flow.get(\"inputRootTopic\")!=topicstring.split(\";\")[1].split(\"=\")[1].split(\".\").shift()){\n\t    continue\n\t} //to discard all root topics not of interest\n\t\n// \tvar typeDef = ref.typeDefinition;\n// \tvar bname = ref.browseName;\n// \tvar ns=bname.namespaceIndex;\n// \tvar name=bname.name;\n// \tconsole.log(\"Nodeclass 2: \" + String(ref.nodeClass==2));\n// \tconsole.log(\"datatype \" + typeof(ref.dataType));\n// \tconsole.log(\"Null check\" + String(ref.dataType=='Null'));\n\n\t// Select only wanted namespace variables and format payload\n\tif (ref.nodeClass==1) {\n\t   var prohibitedObjects = [\"_System\", \"_Statistics\", \"_Hints\"];\n\t   if (prohibitedObjects.includes(topicstring.split('.').pop())) {\n\t        continue;\n\t   }\n\t   parsecomplete = false;\n \t   var nodeClass1msg = {};\n\t   nodeClass1msg.topic = topicstring;\n\t   nodeClass1msg.payload = \"\";\n\t   nodeClass1msg.actiontype = \"browse\";\n\t   console.log(\"Logging nodeClass1msg \\n\");\n\t   console.log(nodeClass1msg);\n\t   nodeClass1array.push(nodeClass1msg);\n\t} else \n\t    if (ref.nodeClass==2) {\n    \t    var nodeClass2msg = {};\n    \t\tnodeClass2msg.topic = topicstring;\n    // \t\tconsole.log(newmsg.topic);\n    \t\tnodeClass2msg.payload=\"\";\n    \t\tnodeClass2msg.dataType=ref.dataType;\n    \t\tnodeClass2msg.browseName=\"\"\n    \t\tnodeClass2msg.item=\"\";\n    // \t\tnewmsg.parts={};\n    // \t\tnewmsg.parts.index = i;\n    // \t\tnewmsg.parts.count=items.length;\n            console.log(\"Logging nodeClass2msg \\n\");\n    // \t\tconsole.log(nodeClass2msg);\n    \t\tnodeClass2array.push(nodeClass2msg);\n    \t}\n}\n\nif (parsecomplete) { \n    flow.set('browseDone', true);\n    return [nodeClass2array, null];\n} else {\n    console.log(nodeClass1array);\n    return [nodeClass2array, nodeClass1array];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 780,
        "wires": [
            [
                "f9386e78.1b212",
                "70dad118.ddb49"
            ],
            [
                "eabce6a4.7fff48",
                "d89a0214.fc5e2"
            ]
        ]
    },
    {
        "id": "f9386e78.1b212",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "debug filter function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 780,
        "wires": []
    },
    {
        "id": "a79c0571.ceb138",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Parse OPC objects to JSON",
        "func": "var newmsg = msg;\nvar opc_object_metadata = flow.get(\"opc_object_metadata\");\n// topics = newmsg.items;\n\n// topic = topics[2];\n// rootnode = {};\n\nfor (var item = 0; item < newmsg.items.length; item++) {\n    var topic_structure = newmsg.items[item].nodeId.value.split(\".\");\n    var metric_name = topic_structure[topic_structure.length - 1];\n\n    var mqtt_topic = topic_structure.join('/');\n    var mqtt_msg = {};\n\n    //format object payload\n    mqtt_msg['payload'] = {};\n    mqtt_msg['payload']['metric name'] = metric_name;\n    var value = newmsg.payload[item].value.value;\n    mqtt_msg['payload']['value'] = Number.isInteger(value) ? value : +value.toFixed(1);\n    mqtt_msg['topic'] = mqtt_topic;\n\n    //add engineering metadata\n    var item_index_name = topic_structure.slice(-2).join('.');\n\n    //for objects without metadata, skip adding attributes to MQTT payload\n    if (opc_object_metadata[item_index_name] == (undefined || 'deleted')) {\n        node.send(mqtt_msg);\n    } else {\n        mqtt_msg['payload']['metadata'] = opc_object_metadata[item_index_name];\n        console.log(mqtt_msg);\n        // Send payload\n        node.send(mqtt_msg);\n    }\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1040,
        "wires": [
            [
                "535f121c.a34dbc",
                "c0ae3869.19fca8"
            ]
        ]
    },
    {
        "id": "535f121c.a34dbc",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Debug parser",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c0ae3869.19fca8",
        "type": "mqtt out",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Local UNS Broker",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7cae3f04.2df14",
        "x": 790,
        "y": 1040,
        "wires": []
    },
    {
        "id": "31580946.217de6",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "Start Reading OPC nodes",
        "info": "## Start Subscription\n\nAutomatically start reading when values to be read have been completely sent",
        "x": 190,
        "y": 960,
        "wires": []
    },
    {
        "id": "1363c1c6.17ac6e",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Clear OPC nodes to be read",
        "info": "## Start Subscription\n\nAutomatically start reading when values to be read have been completely sent",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "abea2513.f80ee8",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Queue node ids from namespace to opc client",
        "info": "## Start Subscription\n\nAutomatically start reading when values to be read have been completely sent",
        "x": 710,
        "y": 200,
        "wires": []
    },
    {
        "id": "eabce6a4.7fff48",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Class1msg debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 780,
        "wires": []
    },
    {
        "id": "31f314e2.19fc6c",
        "type": "delay",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Rate limiter",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 230,
        "y": 860,
        "wires": [
            [
                "df220873.2b1458"
            ]
        ]
    },
    {
        "id": "5d926f0e.5e4f5",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Format Node ID",
        "func": "// store root topic for top level filtering during opc client read\nflow.set(\"inputRootTopic\",msg.payload.split(\".\").shift());\n\n//structure opc browser input payload\nmsg.topic = \"ns=2;s=\" + msg.payload;\nmsg.payload = \"\";\nmsg.actiontype=\"browse\";\n\n/*\nstore input payload in \"nodeid\" variable. This will be used when the browse\naction is executed.\n*/\nflow.set(\"inputNodeId\", msg);\nflow.set('displaynodeid', msg.topic);\n//return entire msg for debugging\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8d5735c2.df98d8",
        "type": "status",
        "z": "a541e962.05bc68",
        "g": "74d03250.dea62c",
        "name": "",
        "scope": [
            "db061246.d1975",
            "c5d3e1c7.89057"
        ],
        "x": 160,
        "y": 1260,
        "wires": [
            [
                "7da6ff5b.49f4a",
                "d78e0bba.c21f18"
            ]
        ]
    },
    {
        "id": "7da6ff5b.49f4a",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "74d03250.dea62c",
        "name": "Status debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d78e0bba.c21f18",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "74d03250.dea62c",
        "name": "status_info",
        "func": "//count all instances without 'clear items' reset\nstatus_info = flow.get('status_info') || {};\n\n// use variable name to store status information\n\nif( msg.status.source.type == 'OpcUa-Client'){\n    var_name = 'opcua_client'; // change to use source name instead of source type\n\n    // if (variable_name != 'OpcUa-Browser') return null; // remove to expand functionality\n    \n    // get value store and initialise if non existent\n    status_info[var_name] = status_info[var_name] || {}; \n\n    if (msg.status.text == 'nodeId stored'){\n        status_info[var_name]['queue_count'] = status_info[var_name]['queue_count'] || 0;\n        status_info[var_name]['queue_count'] = status_info[var_name]['queue_count'] + 1;\n    }\n    \n    if (msg.status.text == 'clear items'){\n        status_info[var_name]['queue_count'] = 0;\n    }\n}\n\nflow.set('status_info', status_info);\n\nreturn status_info[var_name];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "7de283ba.941c0c"
            ]
        ]
    },
    {
        "id": "7de283ba.941c0c",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "74d03250.dea62c",
        "name": "status logger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d8902ee6.21576",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "74d03250.dea62c",
        "name": "Node status Information",
        "info": "",
        "x": 180,
        "y": 1200,
        "wires": []
    },
    {
        "id": "f48742a3.f6f3a",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "ReadLoop",
        "links": [
            "703fc0b8.e135d"
        ],
        "x": 655,
        "y": 1000,
        "wires": []
    },
    {
        "id": "703fc0b8.e135d",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "ReadLoop",
        "links": [
            "f48742a3.f6f3a"
        ],
        "x": 95,
        "y": 1080,
        "wires": [
            [
                "db061246.d1975"
            ]
        ]
    },
    {
        "id": "e309c92d.4e2ae8",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "RateLimitedPayload",
        "links": [
            "df220873.2b1458"
        ],
        "x": 95,
        "y": 820,
        "wires": [
            [
                "c5d3e1c7.89057"
            ]
        ]
    },
    {
        "id": "df220873.2b1458",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "RateLimitedPayload",
        "links": [
            "e309c92d.4e2ae8"
        ],
        "x": 315,
        "y": 860,
        "wires": []
    },
    {
        "id": "d89a0214.fc5e2",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Class1Payloads",
        "links": [
            "274ccc6b.91c014"
        ],
        "x": 695,
        "y": 860,
        "wires": []
    },
    {
        "id": "274ccc6b.91c014",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Class1Payloads",
        "links": [
            "d89a0214.fc5e2"
        ],
        "x": 155,
        "y": 860,
        "wires": [
            [
                "31f314e2.19fc6c"
            ]
        ]
    },
    {
        "id": "a76f9db7.bac63",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Browse Input Node ID",
        "func": "flow.set('system_reset', 'false');\nflow.set(\"discovered_nodeids\", []);\nmsg = flow.get(\"inputNodeId\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "4fd0bb3c.ded324"
            ]
        ]
    },
    {
        "id": "70dad118.ddb49",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Store output node ids",
        "func": "//initialise storage array\ndiscovered_nodeids = flow.get('discovered_nodeids') || [];\n\n//queue received msg array in storage array \ndiscovered_nodeids.push(msg);\nflow.set('discovered_nodeids', discovered_nodeids);\n\n//keep for debugging \nreturn [discovered_nodeids];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 820,
        "wires": [
            [
                "f40782d2.8ac6b"
            ]
        ]
    },
    {
        "id": "ede27a74.c0d7b8",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Start / Stop controls",
        "func": "if (msg.payload == \"start\" && flow.get(\"browseDone\")){\n    flow.set('readstart', true)\n} else if (msg.payload == \"stop\"){\n    /*\n    if button set to clear, set 'readstart' flag to false to stop the multiple\n    reading \n    */\n    flow.set('readstart', false);\n    \n}\n\n// return msg;\n\n// on clear,\n// send clearitems payload and disable readstart",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f40782d2.8ac6b",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 820,
        "wires": []
    },
    {
        "id": "277a247e.1825fc",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Clear queued node ids",
        "func": "if (msg.topic == 'clear'){\n    //this section of code, clears the queued nodeids from the opc client\n    msg = {};\n    msg.payload = \"\";\n    msg.topic = \"clearitems\";\n    // node.send(msg);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "cc5e34f5.2a8438"
            ]
        ]
    },
    {
        "id": "cc5e34f5.2a8438",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "ClearQueue",
        "links": [
            "46ea9238.907b4c"
        ],
        "x": 475,
        "y": 240,
        "wires": []
    },
    {
        "id": "46ea9238.907b4c",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "ClearQueue",
        "links": [
            "cc5e34f5.2a8438"
        ],
        "x": 95,
        "y": 1040,
        "wires": [
            [
                "db061246.d1975"
            ]
        ]
    },
    {
        "id": "972d103b.9cba5",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "InputNodeIdPayload",
        "links": [
            "4fd0bb3c.ded324"
        ],
        "x": 95,
        "y": 780,
        "wires": [
            [
                "c5d3e1c7.89057"
            ]
        ]
    },
    {
        "id": "4fd0bb3c.ded324",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "InputNodeIDPayload",
        "links": [
            "972d103b.9cba5"
        ],
        "x": 505,
        "y": 160,
        "wires": []
    },
    {
        "id": "66d0832a.88033c",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "Queue in opc client",
        "func": "msg = flow.get(\"discovered_nodeids\");\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "c94d0a25.0c4b88"
            ]
        ]
    },
    {
        "id": "c94d0a25.0c4b88",
        "type": "link out",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "QueueClientPayload",
        "links": [
            "92ef667b.5281a8",
            "ac08822a.9b56e"
        ],
        "x": 495,
        "y": 200,
        "wires": []
    },
    {
        "id": "92ef667b.5281a8",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "d539e52b.a141b8",
        "name": "",
        "links": [
            "c94d0a25.0c4b88"
        ],
        "x": 95,
        "y": 1000,
        "wires": [
            [
                "db061246.d1975"
            ]
        ]
    },
    {
        "id": "67b0d416.86be9c",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "display node id",
        "func": "msg = {};\nmsg.payload = flow.get('displaynodeid')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "ffa8b348.163d1"
            ]
        ]
    },
    {
        "id": "d1592692.b0c288",
        "type": "inject",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "67b0d416.86be9c",
                "7abd878a.32b868",
                "81031395.09f46",
                "11d4d3d7.08f86c"
            ]
        ]
    },
    {
        "id": "f12f868f.9b2f08",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "6deb3d77.4824d4",
        "name": "Decode and filter discovered nodes ",
        "info": "",
        "x": 220,
        "y": 720,
        "wires": []
    },
    {
        "id": "7abd878a.32b868",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "display no of discovered nodes",
        "func": "var discovered_nodeids = flow.get(\"discovered_nodeids\");\n\nif(discovered_nodeids == undefined){return null};\ndiscoverednodelength = discovered_nodeids.length;\nmsg = {};\nmsg.payload = discoverednodelength\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "31fbca08.d36ba6"
            ]
        ]
    },
    {
        "id": "81031395.09f46",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "display no of queued",
        "func": "status_info = flow.get('status_info');\nmsg = {};\nmsg.payload = status_info.opcua_client.queue_count;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "7bdadb96.c8d9c4"
            ]
        ]
    },
    {
        "id": "11d4d3d7.08f86c",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "display read state",
        "func": "readstate = flow.get('readstart');\nmsg = {};\nif (readstate == true){\n    msg.payload = \"STARTED\";\n} else if (readstate == false){\n    msg.payload = \"STOPPED\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "e8510b04.d61b78"
            ]
        ]
    },
    {
        "id": "b0e71471.ab21d8",
        "type": "inject",
        "z": "a541e962.05bc68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 720,
        "wires": [
            [
                "977c3a8f.6eb6f8"
            ]
        ]
    },
    {
        "id": "977c3a8f.6eb6f8",
        "type": "function",
        "z": "a541e962.05bc68",
        "name": "prevent unintended read at start",
        "func": "flow.set('system_reset', 'true');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "355e6226.555ffe",
        "type": "comment",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "DASHBOARD CONTROLS",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "d640eee8.ef8dc",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Define OPC Object metadata Ids",
        "func": "//add engineering metadata\nvar opc_object_metadata = flow.get('opc_object_metadata') || {};\n\nvar item = msg.topic;\nvar item_index_name = item.split('.').slice(-2).join('.');\n\nvar opcmetadata_idsuffix = [\n    '_ScalingUnits',    //engineering units\n    '_ScalingRawLow',   //minimum value\n    '_ScalingRawHigh'   //maximum value\n]\n\nif (opc_object_metadata[item_index_name] == undefined) {\n\n    for (let index = 0; index < 3; index++) {\n        // const element = array[index];\n        var metadata_topic = item + \".\" + opcmetadata_idsuffix[index];\n        var metadatamsg = {\n            'topic': metadata_topic,\n            'payload': \"\"\n        }\n        node.send(metadatamsg);\n    }\n\n    //start storage of key-value pairs in metadata\n    opc_object_metadata[item_index_name] = {\n        'Min': null,\n        'Max': null,\n        'LAL': null,\n        'HAL': null,\n        'Unit': 'N/A',\n        'dataType': msg.dataType\n    }\n    flow.set(\"opc_object_metadata\", opc_object_metadata);\n}\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1400,
        "wires": [
            [
                "74b9c52f.d9b6ec"
            ]
        ]
    },
    {
        "id": "74b9c52f.d9b6ec",
        "type": "OpcUa-Client",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "endpoint": "d2ec86aa.d40148",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 500,
        "y": 1400,
        "wires": [
            [
                "5a43c59b.cbbbfc"
            ]
        ]
    },
    {
        "id": "e368b483.403388",
        "type": "debug",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5a43c59b.cbbbfc",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Parse engineering metadata",
        "func": "var opc_object_metadata = flow.get('opc_object_metadata');\n\nvar metadata_name_map = {\n    '_ScalingUnits' : 'Unit',\n    '_ScalingRawLow': 'Min',\n    '_ScalingRawHigh':'Max'\n}\n\nvar item_index_name = msg.topic.split('.').slice(-3, -1).join('.');\n\nvar item_metadata = msg.topic.split('.').slice(-1);\n\nif(msg.payload==null){\n    msg.payload=\"N/A\"\n    };\n\nopc_object_metadata[item_index_name][metadata_name_map[item_metadata]] = msg.payload;\nif (metadata_name_map[item_metadata]=='Min'){\n    opc_object_metadata[item_index_name]['LAL'] = msg.payload;\n} else if(metadata_name_map[item_metadata]=='Max'){\n    opc_object_metadata[item_index_name]['HAL'] = msg.payload;\n}\n\nmsg = RED.util.cloneMessage(opc_object_metadata);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1400,
        "wires": [
            [
                "e368b483.403388"
            ]
        ]
    },
    {
        "id": "ac08822a.9b56e",
        "type": "link in",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "",
        "links": [
            "c94d0a25.0c4b88"
        ],
        "x": 95,
        "y": 1400,
        "wires": [
            [
                "d640eee8.ef8dc"
            ]
        ]
    },
    {
        "id": "5fefd353.e9effc",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Send metadata objects",
        "func": "var items = flow.get(\"opc_object_metadata\")\n\n// console.log(items);\nmsg.options = [];\n\nfor (let index = 0; index < Object.keys(items).length; index++) {\n    const element = Object.keys(items)[index];\n    if (element == 'deleted'){\n        continue\n    }\n    console.log(element)\n    msg.options.push(element)\n}\n\n// console.log(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1500,
        "wires": [
            [
                "abc75f3.abfe5a"
            ]
        ]
    },
    {
        "id": "1c4c3293.2330fd",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Get default ",
        "func": "flow.set(\"selected_opc_object_metadata\", msg.payload);\n\nvar opc_object_metadata = flow.get(\"opc_object_metadata\");\n\nvar minvalue = { payload: opc_object_metadata[msg.payload]['Min'] };\nvar maxvalue = { payload: opc_object_metadata[msg.payload]['Max'] };\nvar lalvalue = { payload: opc_object_metadata[msg.payload]['LAL'] };\nvar halvalue = { payload: opc_object_metadata[msg.payload]['HAL'] };\nvar unitvalue = { payload: opc_object_metadata[msg.payload]['Unit'] };\n\nvar object_metadata_defaults = {\n    'Min': minvalue.payload,\n    'Max': maxvalue.payload,\n    'LAL': lalvalue.payload,\n    'HAL': halvalue.payload,\n    'Unit': unitvalue.payload\n}\nconsole.log(unitvalue.payload);\nflow.set('_metadata_input_buffer', object_metadata_defaults);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1500,
        "wires": [
            [
                "7fb44e1e.baa16"
            ]
        ]
    },
    {
        "id": "387e894a.ee0676",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Max Value",
        "func": "var object_metadata = flow.get(\"_metadata_input_buffer\");\n\nobject_metadata['Max'] = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "e47614b0.266998",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Low Alarm Limit",
        "func": "var object_metadata = flow.get(\"_metadata_input_buffer\");\n\nobject_metadata['LAL'] = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "8becaa91.f4c9b8",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "High Alarm Limit",
        "func": "var object_metadata = flow.get(\"_metadata_input_buffer\");\n\nobject_metadata['HAL'] = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "38746bbc.62ac64",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Units",
        "func": "var object_metadata = flow.get(\"_metadata_input_buffer\");\n\nobject_metadata['Unit'] = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "30409f5d.67ebb",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Min Value",
        "func": "var object_metadata = flow.get(\"_metadata_input_buffer\");\n\nobject_metadata['Min'] = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "8fa88358.be9b",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Update Values",
        "func": "var opc_object_metadata = flow.get('opc_object_metadata');\nvar index = flow.get('selected_opc_object_metadata');\nvar new_values = flow.get('_metadata_input_buffer');\n\nopc_object_metadata[index]['Min'] = new_values['Min'];\nopc_object_metadata[index]['Max'] = new_values['Max'];\nopc_object_metadata[index]['LAL'] = new_values['LAL'];\nopc_object_metadata[index]['HAL'] = new_values['HAL'];\nopc_object_metadata[index]['Unit'] = new_values['Unit'];\n\n// var time = new Date() \n// msg.payload = \"Updated at \" + time.toLocaleDateString; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "7fb44e1e.baa16",
                "8d3e555b.6321d8"
            ]
        ]
    },
    {
        "id": "7fb44e1e.baa16",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Display Values",
        "func": "var buffer = flow.get('_metadata_input_buffer')\n\nvar minvalue = { payload: buffer['Min'] };\nvar maxvalue = { payload: buffer['Max'] };\nvar lalvalue = { payload: buffer['LAL'] };\nvar halvalue = { payload: buffer['HAL'] };\nvar unitvalue = { payload: buffer['Unit'] };\n\nreturn [minvalue, maxvalue, lalvalue, halvalue, unitvalue];\n// return msg;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1620,
        "wires": [
            [
                "410e19af.2bb1e8"
            ],
            [
                "61559a20.d4f324"
            ],
            [
                "14a74a6a.e50c56"
            ],
            [
                "e03a532b.b138e"
            ],
            [
                "e0a88428.8b25a8",
                "e9844d49.d7f81",
                "153b70e3.ed79af",
                "5dbd3542.a7302c"
            ]
        ]
    },
    {
        "id": "8d3e555b.6321d8",
        "type": "function",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Clear Input Stream",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1620,
        "wires": [
            [
                "a678ade1.0d24d",
                "a147ab02.a20848",
                "840dac3a.e5781",
                "275a848f.1abd7c",
                "6e552386.58629c"
            ]
        ]
    },
    {
        "id": "5b927549.2df72c",
        "type": "ui_button",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "",
        "group": "a7e21e86.d132",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Browse Node",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "a76f9db7.bac63"
            ]
        ]
    },
    {
        "id": "915f3a84.b48bf8",
        "type": "ui_button",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "",
        "group": "a7e21e86.d132",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Clear ",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "clear",
        "payloadType": "str",
        "topic": "clear",
        "topicType": "str",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "277a247e.1825fc"
            ]
        ]
    },
    {
        "id": "bdf728ca.57e818",
        "type": "ui_button",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "",
        "group": "a7e21e86.d132",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Queue Discovered",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "66d0832a.88033c"
            ]
        ]
    },
    {
        "id": "3c2a2e56.789a62",
        "type": "ui_button",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "",
        "group": "a7e21e86.d132",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh Metadata ",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1500,
        "wires": [
            [
                "5fefd353.e9effc"
            ]
        ]
    },
    {
        "id": "ff01dfed.0c56",
        "type": "ui_button",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "",
        "group": "a7e21e86.d132",
        "order": 38,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Update Metadata Value",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "8fa88358.be9b"
            ]
        ]
    },
    {
        "id": "abc75f3.abfe5a",
        "type": "ui_dropdown",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Item to Modify",
        "group": "a7e21e86.d132",
        "order": 18,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 560,
        "y": 1500,
        "wires": [
            [
                "1c4c3293.2330fd",
                "8d3e555b.6321d8"
            ]
        ]
    },
    {
        "id": "5aea903.272407",
        "type": "ui_switch",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "",
        "label": "TOGGLE READ STATE",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 15,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "start",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "stop",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "ede27a74.c0d7b8"
            ]
        ]
    },
    {
        "id": "7764270f.b3c7b8",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "name": "OPC UA Node ID input textbox",
        "label": "",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "5d926f0e.5e4f5"
            ]
        ]
    },
    {
        "id": "a147ab02.a20848",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Max Input",
        "label": "Enter New Value",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 24,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1740,
        "wires": [
            [
                "387e894a.ee0676"
            ]
        ]
    },
    {
        "id": "840dac3a.e5781",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "LAL Input",
        "label": "Enter New Value",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 28,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "e47614b0.266998"
            ]
        ]
    },
    {
        "id": "275a848f.1abd7c",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "HAL Input",
        "label": "Enter New Value",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 32,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1820,
        "wires": [
            [
                "8becaa91.f4c9b8"
            ]
        ]
    },
    {
        "id": "6e552386.58629c",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Unit Input",
        "label": "Enter New Value",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 36,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1860,
        "wires": [
            [
                "38746bbc.62ac64"
            ]
        ]
    },
    {
        "id": "a678ade1.0d24d",
        "type": "ui_text_input",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "name": "Min Input",
        "label": "Enter New Value",
        "tooltip": "",
        "group": "a7e21e86.d132",
        "order": 20,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 1700,
        "wires": [
            [
                "30409f5d.67ebb"
            ]
        ]
    },
    {
        "id": "ffa8b348.163d1",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "Formatted Node ID",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 420,
        "wires": []
    },
    {
        "id": "4f44e4df.15649c",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Enter OPC-UA Node ID",
        "format": "",
        "layout": "row-spread",
        "x": 190,
        "y": 380,
        "wires": []
    },
    {
        "id": "31fbca08.d36ba6",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 9,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Discovered child nodes:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "7bdadb96.c8d9c4",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Queued nodes:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "e8510b04.d61b78",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "read state",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 620,
        "y": 600,
        "wires": []
    },
    {
        "id": "60185f33.dbddd",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "2d69c5c6.987c9a",
        "group": "a7e21e86.d132",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Formatted Node ID",
        "format": "",
        "layout": "row-spread",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "410e19af.2bb1e8",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 21,
        "width": 2,
        "height": 1,
        "name": "Min Value Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1440,
        "wires": []
    },
    {
        "id": "61559a20.d4f324",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 25,
        "width": 2,
        "height": 1,
        "name": "Max Value Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1520,
        "wires": []
    },
    {
        "id": "14a74a6a.e50c56",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 29,
        "width": 2,
        "height": 1,
        "name": "LAL Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e03a532b.b138e",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 33,
        "width": 2,
        "height": 1,
        "name": "HAL Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e0a88428.8b25a8",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 30,
        "width": 3,
        "height": 1,
        "name": "Units Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1640,
        "wires": []
    },
    {
        "id": "ed7245db.d3b308",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 19,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Min value text",
        "format": "",
        "layout": "row-spread",
        "x": 160,
        "y": 1700,
        "wires": []
    },
    {
        "id": "aaf2334e.a6f6a",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 23,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Max value text",
        "format": "",
        "layout": "row-spread",
        "x": 160,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4d66ea16.8017e4",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 27,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "LAL value text",
        "format": "",
        "layout": "row-spread",
        "x": 160,
        "y": 1780,
        "wires": []
    },
    {
        "id": "d50a1c65.6863a",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 31,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "HAL value text",
        "format": "",
        "layout": "row-spread",
        "x": 160,
        "y": 1820,
        "wires": []
    },
    {
        "id": "dc8e6c89.e91f8",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 35,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Unit value text",
        "format": "",
        "layout": "row-spread",
        "x": 160,
        "y": 1860,
        "wires": []
    },
    {
        "id": "e9844d49.d7f81",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 26,
        "width": 3,
        "height": 1,
        "name": "Units Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1680,
        "wires": []
    },
    {
        "id": "153b70e3.ed79af",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 34,
        "width": 3,
        "height": 1,
        "name": "Units Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1720,
        "wires": []
    },
    {
        "id": "5dbd3542.a7302c",
        "type": "ui_text",
        "z": "a541e962.05bc68",
        "g": "a2606c5b.b4e03",
        "group": "a7e21e86.d132",
        "order": 22,
        "width": 3,
        "height": 1,
        "name": "Units Display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 950,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b431488ce470e6d1",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "cd6d19469991a564",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "eae106c23a9f8ec6",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "47b226ae4190c10f",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "d7b4629de69a8f06",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "cf3d6c4832fab72a",
        "type": "ui_spacer",
        "z": "a541e962.05bc68",
        "name": "spacer",
        "group": "a7e21e86.d132",
        "order": 37,
        "width": 5,
        "height": 1
    },
    {
        "id": "d2ec86aa.d40148",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.178.34:49320",
        "secpol": "None",
        "secmode": "None",
        "login": true
    },
    {
        "id": "7cae3f04.2df14",
        "type": "mqtt-broker",
        "name": "Local_mosquitto_broker",
        "broker": "MQTTHOSTNAME",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a7e21e86.d132",
        "type": "ui_group",
        "name": "Operations",
        "tab": "fb1bb9a6.d1a1b8",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "fb1bb9a6.d1a1b8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]